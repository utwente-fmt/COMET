	/*
 * 
 */
package Platform_Metamodel.diagram.navigator;

	/**
 * @generated
 */
public class Platform_MetamodelNavigatorActionProvider  extends org.eclipse.ui.navigator.CommonActionProvider {

		/**
 * @generated
 */
private boolean myContribute;

	/**
 * @generated
 */
private OpenDiagramAction myOpenDiagramAction;
	
		/**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonActionExtensionSite aSite) {
	super.init(aSite);
	if (aSite.getViewSite() instanceof org.eclipse.ui.navigator.ICommonViewerWorkbenchSite) {
		myContribute = true;
		makeActions((org.eclipse.ui.navigator.ICommonViewerWorkbenchSite) aSite.getViewSite());
	} else {
		myContribute = false;
	}
}
	
		/**
 * @generated
 */
private void makeActions(org.eclipse.ui.navigator.ICommonViewerWorkbenchSite viewerSite) {
	myOpenDiagramAction = new OpenDiagramAction(viewerSite);
}
	
		/**
 * @generated
 */
public void fillActionBars(org.eclipse.ui.IActionBars actionBars) {
	if (!myContribute) {
		return;
	}
	org.eclipse.jface.viewers.IStructuredSelection selection = (org.eclipse.jface.viewers.IStructuredSelection) getContext().getSelection();
	myOpenDiagramAction.selectionChanged(selection);
	if (myOpenDiagramAction.isEnabled()) {
		actionBars.setGlobalActionHandler(org.eclipse.ui.navigator.ICommonActionConstants.OPEN, myOpenDiagramAction);
	}
}
	
		/**
 * @generated
 */
public void fillContextMenu(org.eclipse.jface.action.IMenuManager menu) {
}
	
	/**
 * @generated
 */
private static class OpenDiagramAction extends org.eclipse.jface.action.Action {

		/**
 * @generated
 */
	private org.eclipse.gmf.runtime.notation.Diagram myDiagram;
		
	/**
 * @generated
 */
	private org.eclipse.ui.navigator.ICommonViewerWorkbenchSite myViewerSite;
	
	/**
 * @generated
 */
public OpenDiagramAction(org.eclipse.ui.navigator.ICommonViewerWorkbenchSite viewerSite) {
	super(Platform_Metamodel.diagram.part.Messages.NavigatorActionProvider_OpenDiagramActionName);
	myViewerSite = viewerSite;
}
	
	/**
 * @generated
 */
public final void selectionChanged(org.eclipse.jface.viewers.IStructuredSelection selection) {
	myDiagram = null;
	if (selection.size() == 1) {
		Object selectedElement = selection.getFirstElement();
		if (selectedElement instanceof Platform_Metamodel.diagram.navigator.Platform_MetamodelNavigatorItem) {
			selectedElement = ((Platform_Metamodel.diagram.navigator.Platform_MetamodelNavigatorItem) selectedElement).getView();
		} else if (selectedElement instanceof org.eclipse.core.runtime.IAdaptable) {
			selectedElement = ((org.eclipse.core.runtime.IAdaptable) selectedElement).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
		}
		if (selectedElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			org.eclipse.gmf.runtime.notation.Diagram diagram = (org.eclipse.gmf.runtime.notation.Diagram) selectedElement;
			if (Platform_Metamodel.diagram.edit.parts.PlatformApplicationModelRootEditPart.MODEL_ID.equals(Platform_Metamodel.diagram.part.Platform_MetamodelVisualIDRegistry.getModelID(diagram))) {
				myDiagram = diagram;
			}
		}
	}
	setEnabled(myDiagram != null);
}
	
	/**
 * @generated
 */
public void run() {
	if (myDiagram == null || myDiagram.eResource() == null) {
		return;
	}
			
	org.eclipse.ui.IEditorInput editorInput = getEditorInput(myDiagram);
	org.eclipse.ui.IWorkbenchPage page = myViewerSite.getPage();
 	try {
		page.openEditor(editorInput, Platform_Metamodel.diagram.part.Platform_MetamodelDiagramEditor.ID);
	} catch (org.eclipse.ui.PartInitException e) {
		Platform_Metamodel.diagram.part.Platform_MetamodelDiagramEditorPlugin.getInstance().logError("Exception while openning diagram", e);  //$NON-NLS-1$
	}
}
	
	/**
 * @generated
 */
private static org.eclipse.ui.IEditorInput getEditorInput(org.eclipse.gmf.runtime.notation.Diagram diagram) {
	org.eclipse.emf.ecore.resource.Resource diagramResource = diagram.eResource();
	for (org.eclipse.emf.ecore.EObject nextEObject : diagramResource.getContents()) {
		if (nextEObject == diagram) {
			return new org.eclipse.ui.part.FileEditorInput(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(diagramResource));
		}
		if (nextEObject instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			break;
		}
	}
	org.eclipse.emf.common.util.URI uri = org.eclipse.emf.ecore.util.EcoreUtil.getURI(diagram);
String editorName = uri.lastSegment() + '#' + diagram.eResource().getContents().indexOf(diagram);
org.eclipse.ui.IEditorInput editorInput = new org.eclipse.emf.common.ui.URIEditorInput(uri, editorName);
	return editorInput;
}
	
	}

    }
