/*
 * 
 */
package Platform_Metamodel.diagram.edit.parts;

/**
 * @generated
 */
public class ProcessorStateEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 3001;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public ProcessorStateEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
			super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new Platform_Metamodel.diagram.edit.policies.ProcessorStateItemSemanticEditPolicy());
							installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
		}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
					org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				org.eclipse.gmf.runtime.notation.View childView = (org.eclipse.gmf.runtime.notation.View) child.getModel();
switch (Platform_Metamodel.diagram.part.Platform_MetamodelVisualIDRegistry.getVisualID(childView)) {
case Platform_Metamodel.diagram.edit.parts.ProcessorStateIdentifierEditPart.VISUAL_ID:	return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy() {

	protected java.util.List createSelectionHandles() {
		org.eclipse.gef.handles.MoveHandle mh = new org.eclipse.gef.handles.MoveHandle((org.eclipse.gef.GraphicalEditPart) getHost());
		mh.setBorder(null);
		return java.util.Collections.singletonList(mh);
	}
}
;
}
				org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new ProcessorStateFigure();
	}

		/**
 * @generated
 */
	public ProcessorStateFigure getPrimaryShape() {
		return (ProcessorStateFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStateIsWorkingEditPart) {
			((Platform_Metamodel.diagram.edit.parts.ProcessorStateIsWorkingEditPart) childEditPart).setLabel(getPrimaryShape().getFigureProcessorStateIsWorkingLabelFigure());
			return true;
		}
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStateFrequencyEditPart) {
			((Platform_Metamodel.diagram.edit.parts.ProcessorStateFrequencyEditPart) childEditPart).setLabel(getPrimaryShape().getFigureProcessorStateFrequencyLabelFigure());
			return true;
		}
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStatePowerConsumptionEditPart) {
			((Platform_Metamodel.diagram.edit.parts.ProcessorStatePowerConsumptionEditPart) childEditPart).setLabel(getPrimaryShape().getFigureProcessorStatePowerConsumptionLabelFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStateIsWorkingEditPart) {
			return true;
		}
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStateFrequencyEditPart) {
			return true;
		}
		if (childEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStatePowerConsumptionEditPart) {
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				if (editPart instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
			return getBorderedFigure().getBorderItemContainer();
		}
		return getContentPane();
	}

				/**
 * @generated
 */
		protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer, org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
			if (borderItemEditPart instanceof Platform_Metamodel.diagram.edit.parts.ProcessorStateIdentifierEditPart) {
				org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.SOUTH);
				locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-20, -20));
				borderItemContainer.add(borderItemEditPart.getFigure(), locator);
			} else {
				super.addBorderItem(borderItemContainer, borderItemEditPart);
			}
		}
		
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createMainFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(Platform_Metamodel.diagram.part.Platform_MetamodelVisualIDRegistry.getType(Platform_Metamodel.diagram.edit.parts.ProcessorStateIdentifierEditPart.VISUAL_ID));
		}
	

	
	
	
/**
 * @generated
 */
public class ProcessorStateFigure extends org.eclipse.draw2d.Ellipse {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureProcessorStateIsWorkingLabelFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureProcessorStateFrequencyLabelFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureProcessorStatePowerConsumptionLabelFigure; 




	/**
	 * @generated
	 */
	public ProcessorStateFigure() {
				this.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
));
		createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


fFigureProcessorStateIsWorkingLabelFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();

fFigureProcessorStateIsWorkingLabelFigure.setText("");

this.add(fFigureProcessorStateIsWorkingLabelFigure);



fFigureProcessorStateFrequencyLabelFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();

fFigureProcessorStateFrequencyLabelFigure.setText("");

this.add(fFigureProcessorStateFrequencyLabelFigure);



fFigureProcessorStatePowerConsumptionLabelFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();

fFigureProcessorStatePowerConsumptionLabelFigure.setText("");

this.add(fFigureProcessorStatePowerConsumptionLabelFigure);


	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureProcessorStateIsWorkingLabelFigure() {
		return fFigureProcessorStateIsWorkingLabelFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureProcessorStateFrequencyLabelFigure() {
		return fFigureProcessorStateFrequencyLabelFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureProcessorStatePowerConsumptionLabelFigure() {
		return fFigureProcessorStatePowerConsumptionLabelFigure;
	}


}


	
	}
